{
  "_from": "ngraph.pixel",
  "_id": "ngraph.pixel@2.4.1",
  "_inBundle": false,
  "_integrity": "sha1-n3NEuurGF9okgZII5igldS8EBdE=",
  "_location": "/ngraph.pixel",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ngraph.pixel",
    "fetchSpec": "latest",
    "name": "ngraph.pixel",
    "raw": "ngraph.pixel",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngraph.pixel/-/ngraph.pixel-2.4.1.tgz",
  "_shasum": "9f7344baeac617da24819208e62825752f0405d1",
  "_shrinkwrap": null,
  "_spec": "ngraph.pixel",
  "_where": "/home/mno/normandra.github.io/4d_vis",
  "author": {
    "name": "Andrei Kashcha"
  },
  "bugs": {
    "url": "https://github.com/anvaka/ngraph.pixel/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "element-class": "^0.2.0",
    "insert-css": "^0.2.0",
    "ngraph.events": "0.0.3",
    "pixel.layout": "^0.1.1",
    "three": "^0.73.0",
    "three.fly": "0.1.6"
  },
  "deprecated": false,
  "description": "Fast graph renderer based on low level ShaderMaterial from three.js",
  "devDependencies": {
    "browserify": "^9.0.8",
    "config.pixel": "2.0.0",
    "edgelegend": "2.0.0",
    "ngraph.generators": "0.0.16",
    "query-string": "^1.0.0",
    "tap": "^5.1.1"
  },
  "homepage": "https://github.com/anvaka/ngraph.pixel#readme",
  "keywords": [
    "graph",
    "layout",
    "ngraph",
    "particle",
    "render",
    "renderer",
    "webgl"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ngraph.pixel",
  "optionalDependencies": {},
  "readme": "# ngraph.pixel [![Build Status](https://travis-ci.org/anvaka/ngraph.pixel.svg?branch=master)](https://travis-ci.org/anvaka/ngraph.pixel)\n\nFast graph renderer based on low level ShaderMaterial from three.js\n\n# usage\n\nThis will render a simple graph in 3D:\n\n``` js\n// let's create a simple graph:\nvar graph = require('ngraph.graph')();\ngraph.addLink(1, 2);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph);\n```\n\nBy default use keyboard keys `WASD` to fly around, and click and drag with\nmouse to point the camera. This is not the most convenient way to navigate\nthe scene, so your feedback is very welcome.\n\nBy default graph is laid out using [pixel.layout](https://github.com/anvaka/pixel.layout)\nmodule, which can layout graphs in both 3D:\n![3d graph is default](http://i.imgur.com/zMJCtyk.png)\n\nand 2D spaces:\n![2d graph](http://i.imgur.com/SCRFvnQ.png)\n\n\n# demo\n\nYou can take a look at available demos:\n\n* [Basic \"Hello world\"](https://anvaka.github.io/ngraph.pixel/demo/basic/index.html?graph=balancedBinTree)\n* [\"Hello world\" with colors](https://anvaka.github.io/ngraph.pixel/demo/colors/index.html?graph=balancedBinTree)\n* [Configuring pixel](https://anvaka.github.io/ngraph.pixel/demo/config/index.html?graph=balancedBinTree)\n* [Editing graph](https://anvaka.github.io/ngraph.pixel/demo/edit/index.html)\n\n## mouse events\n\nHow to detect when user clicks/hovers a node?\n\n``` js\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph);\nrenderer.on('nodeclick', function(node) {\n  console.log('Clicked on ' + JSON.stringify(node));\n});\n\nrenderer.on('nodedblclick', function(node) {\n  console.log('Double clicked on ' + JSON.stringify(node));\n});\n\nrenderer.on('nodehover', function(node) {\n  console.log('Hover node ' + JSON.stringify(node));\n});\n\n// If you want to unsubscribe from event, just use `off()` method:\nrenderer.on('nodehover', handler);\nrenderer.off('nodehover', handler);\n```\n\n## custom node UI\n\n### How to set default node UI?\n\n``` js\nvar graph = require('ngraph.graph')();\ngraph.addLink(1, 2);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph, {\n  node: createNodeUI\n});\n\nfunction createNodeUI(node) {\n  return {\n    color: 0xFF00FF,\n    size: 20\n  };\n}\n```\n\n### How to update node color/size?\n\n``` js\nvar graph = require('ngraph.graph')();\nvar myNode = graph.addNode(1);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph);\n\nvar nodeUI = renderer.getNode(myNode.id);\nnodeUI.color = 0xFF0000; // update node color\nnodeUI.size = 30; // update size\n\n// that's it, nothing else is required.\n```\n\n### How to make transparent nodes?\n\nBest way to do so, is tell the renderer that you are not interested\nin rendering such nodes:\n\n``` js\nvar graph = require('ngraph.graph')();\ngraph.addNode(1);\ngraph.addNode(2, 'hidden');\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph, {\n  node: function createNodeUI(node) {\n    if (node.data === 'hidden') return; // don't need to render!\n    // otherwise return default UI:\n    return {\n      color: 0xFF00FF,\n      size: 30\n    };\n  }\n});\n```\n\nNote: Hiding nodes from UI does not remove them from a graph or layout algorithm.\n\n### How to get node UI?\n\n``` js\n// There are several ways to do so.\n\nvar graph = require('ngraph.graph')();\nvar node = graph.add(2, 3);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph);\n\n// if you know link id you can pass it directly:\nvar ui = renderer.getNode(node.id);\n\n// if you want to get all UI elements:\nrenderer.forEachNode(function (nodeUI) {\n  // nodeUI - is your UI object\n});\n\n// of course you can also iterate over each link of the graph:\ngraph.forEachNode(function (nodeModel) {\n  var ui = renderer.getLink(nodeModel.id);\n  // but be careful! If your link UI creation function decided to skip this\n  // node, you will get `ui === undefined` here.\n});\n```\n\n## custom link UI\n\nThe API for links is symmetrical to nodes. Please take a look below:\n\n### How to set default link color?\n\n``` js\nvar graph = require('ngraph.graph')();\nvar myLink = graph.addLink(1, 2);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph, {\n  link: createLinkUI\n});\n\nfunction createLinkUI(link) {\n  return {\n    fromColor: 0xFF00FF,\n    toColor: 0x00FFFF\n  };\n}\n```\n\n### How to update link color?\n\n``` js\nvar graph = require('ngraph.graph')();\nvar myLink = graph.addLink(1, 2);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph);\n\nvar linkUI = renderer.getLink(myLink.id);\nlinkUI.fromColor = 0xFF0000; // update link head color\nlinkUI.toColor = 0x00FF00; // update link tail color\n\n// that's it, nothing else is required.\n```\n\n### How to make transparent links?\n\nBest way to do so, is tell the renderer that you are not interested\nin rendering such links:\n\n``` js\nvar graph = require('ngraph.graph')();\ngraph.addLink(1, 2);\ngraph.addLink(2, 3, 'hidden');\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph, {\n  link: function createLinkUI(link) {\n    if (link.data === 'hidden') return; // don't need to render!\n    // otherwise return default link:\n    return {\n      fromColor: 0xFF00FF,\n      toColor: 0x00FFFF\n    };\n  }\n});\n```\n\nNote: Hiding links from UI does not remove them from a graph or layout algorithm.\n\n### How to get link UI?\n\n``` js\n// There are several ways to do so.\n\nvar graph = require('ngraph.graph')();\nvar link = graph.addLink(2, 3);\n\nvar renderGraph = require('ngraph.pixel');\nvar renderer = renderGraph(graph);\n\n// if you know link id you can pass it directly:\nvar ui = renderer.getLink(link.id);\n\n// if you want to get all UI elements:\nrenderer.forEachLink(function (linkUI) {\n  // linkUI - is your UI object\n});\n\n// of course you can also iterate over each link of the graph:\ngraph.forEachLink(function (linkModel) {\n  var ui = renderer.getLink(linkModel.id);\n  // but be careful! If your link UI creation function decided to skip this\n  // link, you will get `ui === undefined` here.\n});\n```\n\n## Layout\n\n### How to make 2d layout?\n\n``` js\nvar graph = require('ngraph.graph')();\nvar link = graph.addLink(2, 3);\n\nvar renderGraph = require('ngraph.pixel');\n\n// By default the layout is 3D. To switch it to 2d mode:\nvar renderer = renderGraph(graph, {\n  is3d: false\n});\n```\n\n### How to change layout forces configuration\n\n``` js\nvar graph = require('ngraph.graph')();\nvar link = graph.addLink(2, 3);\n\nvar renderGraph = require('ngraph.pixel');\n\n// pass physics property to the options; See more information here: \n// https://github.com/anvaka/ngraph.forcelayout#configuring-physics\nvar renderer = renderGraph(graph, {\n  physics: {\n    springLength : 80,\n    springCoeff : 0.0002,\n    gravity: -1.2,\n    theta : 0.8,\n    dragCoeff : 0.02\n  }\n});\n```\n\n\n# Feedback?\nThis is very early version of the library and your feedback is very much appreciated.\nFeel free to ping me over [email](https://github.com/anvaka), [twitter](https://twitter.com/anvaka), or open [issue here](https://github.com/anvaka/ngraph.pixel/issues/new).\nYou can also join library discussion on [gitter](https://gitter.im/anvaka/VivaGraphJS).\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install ngraph.pixel\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anvaka/ngraph.pixel.git"
  },
  "scripts": {
    "background": "browserify demo/background/index.js > demo/background/bundle.js",
    "basic": "browserify demo/basic/index.js > demo/basic/bundle.js",
    "colors": "browserify demo/colors/index.js > demo/colors/bundle.js",
    "config": "browserify demo/config/index.js > demo/config/bundle.js",
    "edit": "browserify demo/edit/index.js > demo/edit/bundle.js",
    "start": "npm run basic && npm run background && npm run colors && npm run config && npm run edit",
    "test": "tap test/*.js"
  },
  "version": "2.4.1"
}
