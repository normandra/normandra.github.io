{
  "_from": "ngraph.centrality",
  "_id": "ngraph.centrality@0.3.0",
  "_inBundle": false,
  "_integrity": "sha1-jMDsAxnvCjdDV/wQRMFpdbF50J0=",
  "_location": "/ngraph.centrality",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ngraph.centrality",
    "fetchSpec": "latest",
    "name": "ngraph.centrality",
    "raw": "ngraph.centrality",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngraph.centrality/-/ngraph.centrality-0.3.0.tgz",
  "_shasum": "8cc0ec0319ef0a374357fc1044c16975b179d09d",
  "_shrinkwrap": null,
  "_spec": "ngraph.centrality",
  "_where": "/home/mno/normandra.github.io/4d_vis",
  "author": {
    "name": "Andrei Kashcha"
  },
  "bugs": {
    "url": "https://github.com/anvaka/ngraph.centrality/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Module to calculate graph centrality metrics",
  "devDependencies": {
    "ngraph.generators": "0.0.17",
    "ngraph.graph": "0.0.12",
    "tap": "^1.4.1"
  },
  "homepage": "https://github.com/anvaka/ngraph.centrality#readme",
  "keywords": [
    "betweenness",
    "centrality",
    "degree",
    "graph"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ngraph.centrality",
  "optionalDependencies": {},
  "readme": "# ngraph.centrality [![Build Status](https://travis-ci.org/anvaka/ngraph.centrality.svg)](https://travis-ci.org/anvaka/ngraph.centrality)\n\nLibrary computes centrality for entire graph and returns object, where keys are\nnodes' identifiers and values are centrality values:\n\n``` javascript\n{\n  node_1: centrality_value_for_node_1,\n  node_2: centrality_value_for_node_2\n  // ...\n}\n```\n\n# usage\n\n## [Degree centrality](https://en.wikipedia.org/wiki/Centrality#Degree_centrality)\n\n``` javascript\nvar centrality = require('ngraph.centrality');\nvar g = require('ngraph.graph')();\n\n// Let's build a simple graph:\ng.addLink('fortran', 'c');\ng.addLink('c', 'c++');\ng.addLink('c++', 'perl');\ng.addLink('c', 'javascript');\n\n// this will consider graph as undirected:\nvar degreeCentrality = centrality.degree(g);\n\n/*\ndegreeCentrality is:\n{\n  \"fortran\": 1,\n  \"c\": 3,\n  \"c++\": 2,\n  \"perl\": 1,\n  \"javascript\": 1\n}\n*/\n\n// This will compute in-centrality:\nvar inCentrality = centrality.degree(g, 'in');\n/* inCentrality is \n{\n  \"fortran\": 0,\n  \"c\": 1,\n  \"c++\": 1,\n  \"perl\": 1,\n  \"javascript\": 1\n}\n*/\n\n// out-centrality:\nvar outCentrality = centrality.degree(g, 'out');\n/* outCentrality is\n{\n  \"fortran\": 1,\n  \"c\": 2,\n  \"c++\": 1,\n  \"perl\": 0,\n  \"javascript\": 0\n}\n*/\n\n// You can also pass 'inout' or 'both' to get same results\n// as `degreeCentrality`\nvar sameAsDegreeCentrality = centrality.degree(g, 'inout');\n```\n\nPerformance of degree centrality calculation is:\n\n* **inout**: `O(n)`, where `n` is number of nodes\n* **in** or **out**: `O(n * a)`, where `a` is the average number of edges per\nnode\n\n\n## [Betweenness centrality](https://en.wikipedia.org/wiki/Betweenness_centrality)\n\n``` javascript\nvar centrality = require('ngraph.centrality');\nvar g = require('ngraph.graph')();\n// Let's use the same graph as before:\ng.addLink('fortran', 'c');\ng.addLink('c', 'c++');\ng.addLink('c++', 'perl');\ng.addLink('c', 'javascript');\n\n// this will consider graph as undirected:\nvar betweenness = centrality.betweenness(g);\n/* betweenness centrality is:\n\n{\n  \"fortran\": 0,\n  \"c\": 5,\n  \"c++\": 3,\n  \"perl\": 0,\n  \"javascript\": 0\n}\n*/\n\n// this will consider graph as directed:\nvar directedBetweenness = centrality.betweenness(g, true);\n/* directedBetweenness is:\n{\n  \"fortran\": 0,\n  \"c\": 3,\n  \"c++\": 2,\n  \"perl\": 0,\n  \"javascript\": 0\n}\n*/\n```\n\nPerformance of betweenness calculation is `O(n * e)` time, and `O(n + e)` space\nwhere `n` is number of nodes and `e` is number of edges.\n\nThis library implements Brandes's algorithm published in [A Faster Algorithm for Betweenness Centrality](http://www.inf.uni-konstanz.de/algo/publications/b-fabc-01.pdf)\nand further discussed in [On Variants of Shortest-Path Betweenness\nCentrality and their Generic Computation](http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf).\n\n## [Closeness centrality](https://en.wikipedia.org/wiki/Closeness_centrality)\n\n In a connected graph, the normalized closeness centrality of a node is the average\n length of the shortest path between the node and all other nodes in the\n graph. Thus the more central a node is, the closer it is to all other nodes.\n\n ``` js\nvar centrality = require('ngraph.centrality');\nvar g = createGraph();\ng.addLink(1, 2);\ng.addLink(2, 3);\n\nvar closeness = centrality.closeness(g);\n\n// closeness is: \n// { \n//   '1': 0.6666666666666666,\n//   '2': 1,\n//   '3': 0.6666666666666666\n// }\n ```\n \n ## [Eccentricity centrality](https://en.wikipedia.org/wiki/Distance_(graph_theory))\n\n The eccentricity centrality of a node is the greatest distance between that node and\n any other node in the network. It can be thought of as how far a node is from the \n node most distant from it in the graph.\n\n ``` js\nvar centrality = require('ngraph.centrality');\nvar g = createGraph();\ng.addLink(1, 2);\ng.addLink(2, 3);\n\nvar eccentricity = centrality.eccentricity(g);\n\n// eccentricity is: \n// { \n//   '1': 2,\n//   '2': 1,\n//   '3': 2\n// }\n ```\n \n Since the graph's diameter equals maximum eccentricity, we can easily calculate this using the returned object:\n \n ```js\n var eccentricityValues = Object.keys(eccentricity).map(function(key) {return eccentricity[key]});\n var diameter = Math.max.apply(null, eccentricityValues);\n // Returns 2\n ```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install ngraph.centrality\n```\n\n# license\n\nMIT\n\n# todo\n\nIt would be nice to have asynchronous version for each centrality calculator.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anvaka/ngraph.centrality.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "0.3.0"
}
